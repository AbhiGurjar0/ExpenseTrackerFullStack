<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Expenses Report</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            background: #f3f4f6;
            margin: 0;
            padding: 20px;
        }

        h1 {
            text-align: center;
            margin-bottom: 20px;
            color: #1f2937;
        }

        table {
            width: 100%;
            border-collapse: collapse;
            margin-bottom: 20px;
            background: #fff;
            border-radius: 8px;
            overflow: hidden;
        }

        th,
        td {
            padding: 12px;
            text-align: left;
            border-bottom: 1px solid #e5e7eb;
        }

        th {
            background: #2563eb;
            color: #fff;
        }

        tr:nth-child(even) {
            background: #f9fafb;
        }

        tr:hover {
            background: #e0f2fe;
        }

        .pagination {
            text-align: center;
            margin-top: 20px;
        }

        .pagination button {
            padding: 8px 16px;
            margin: 0 5px;
            background: #2563eb;
            color: #fff;
            border: none;
            border-radius: 6px;
            cursor: pointer;
        }

        .pagination button:disabled {
            background: #94a3b8;
            cursor: not-allowed;
        }

        .page-info {
            margin-top: 10px;
            text-align: center;
            color: #374151;
        }
    </style>
</head>

<body>

    <h1>Expenses Report</h1>

    <select name="user" id="user-select">
        <option value="2">2</option>
        <option value="5">5</option>
        <option value="10" selected>10</option>
    </select>

    <table id="expenses-table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Description</th>
                <th>Category</th>
                <th>Income</th>
                <th>Expense</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody></tbody>
    </table>

    <div class="pagination">
        <button id="prevBtn">Previous</button>
        <button id="nextBtn">Next</button>
    </div>
    <div class="page-info" id="pageInfo"></div>

    <script>
        let records = []; 
        let currentPage = 1;
        let rowsPerPage = parseInt(document.getElementById('user-select').value);

        const tableBody = document.querySelector('#expenses-table tbody');
        const prevBtn = document.getElementById('prevBtn');
        const nextBtn = document.getElementById('nextBtn');
        const pageInfo = document.getElementById('pageInfo');

        function updateRowsPerPage() {
            rowsPerPage = parseInt(document.getElementById('user-select').value);
            currentPage = 1;
            renderTable();
        }

        function renderTable() {
            tableBody.innerHTML = '';
            const start = (currentPage - 1) * rowsPerPage;
            const end = start + rowsPerPage;
            const pageItems = records.slice(start, end);

            pageItems.forEach(item => {
                const tr = document.createElement('tr');
                tr.innerHTML = `
            <td>${item.date}</td>
            <td>${item.title}</td>
            <td>${item.category}</td>
            <td>${item.income.toFixed(2)}</td>
            <td>${item.expense.toFixed(2)}</td>
            <td>
                <button class="delete-btn" data-id="${item.id}" data-category="${item.category}">
                    ðŸ—‘ Delete
                </button>
            </td>
        `;
                tableBody.appendChild(tr);
            });

            prevBtn.disabled = currentPage === 1;
            nextBtn.disabled = currentPage === Math.ceil(records.length / rowsPerPage);
            pageInfo.textContent = `Page ${currentPage} of ${Math.ceil(records.length / rowsPerPage)}`;

            
            document.querySelectorAll('.delete-btn').forEach(btn => {
                btn.addEventListener('click', async (e) => {
                    const id = e.target.dataset.id;
                    const category = e.target.dataset.category;
                    if (confirm(`Are you sure you want to delete this ${category}?`)) {
                        try {
                            await fetch(`/delete/${id}`, { method: 'POST' }); 
                            records = records.filter(r => r.id != id);
                            renderTable();
                        } catch (err) {
                            console.error('Failed to delete record:', err);
                            alert('Failed to delete record.');
                        }
                    }
                });
            });
        }

        prevBtn.addEventListener('click', () => {
            if (currentPage > 1) {
                currentPage--;
                renderTable();
            }
        });

        nextBtn.addEventListener('click', () => {
            if (currentPage < Math.ceil(records.length / rowsPerPage)) {
                currentPage++;
                renderTable();
            }
        });

        document.getElementById('user-select').addEventListener('change', updateRowsPerPage);

        async function getData() {
            try {
                let data = await fetch('/api/report');
                data = await data.json();
                records = data.daywiseExp.map(exp => ({
                    id: exp.id,
                    date: new Date(exp.date).toLocaleDateString(),
                    title: exp.title,
                    category: 'Expense',
                    income: 0,
                    expense: exp.amount
                })).concat(data.daywiseIncome.map(inc => ({
                    id: inc.id,
                    date: new Date(inc.date).toLocaleDateString(),
                    title: inc.title,
                    category: 'Income',
                    income: inc.amount,
                    expense: 0
                })));

                renderTable();
            } catch (error) {
                console.error('Error fetching daily records:', error);
                records = [];
                renderTable();
            }
        }

        getData();
    </script>
</body>

</html>