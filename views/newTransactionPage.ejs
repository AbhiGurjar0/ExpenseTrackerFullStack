<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Transaction History | ExpenseTracker</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }
        
        :root {
            --primary: #4361ee;
            --secondary: #3f37c9;
            --success: #4cc9f0;
            --danger: #f72585;
            --warning: #f8961e;
            --light: #f8f9fa;
            --dark: #212529;
            --gray: #6c757d;
            --light-gray: #e9ecef;
        }
        
        body {
            background-color: #f5f7fb;
            color: var(--dark);
            line-height: 1.6;
        }
        
        .container {
            max-width: 800px;
            margin: 0 auto;
            padding: 20px;
        }
        
        header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 20px 0;
            margin-bottom: 20px;
        }
        
        .logo {
            display: flex;
            align-items: center;
            gap: 10px;
            font-size: 24px;
            font-weight: 700;
            color: var(--primary);
            text-decoration: none;
        }
        
        .logo i {
            font-size: 28px;
        }
        
        .back-btn {
            display: flex;
            align-items: center;
            gap: 8px;
            padding: 10px 15px;
            background: white;
            border-radius: 8px;
            text-decoration: none;
            color: var(--dark);
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.05);
            transition: all 0.3s ease;
        }
        
        .back-btn:hover {
            background: var(--light);
            transform: translateY(-2px);
        }
        
        .page-title {
            font-size: 28px;
            font-weight: 700;
            margin-bottom: 10px;
            color: var(--dark);
        }
        
        .page-subtitle {
            color: var(--gray);
            margin-bottom: 30px;
        }
        
        .filter-section {
            background: white;
            border-radius: 12px;
            padding: 20px;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
            margin-bottom: 25px;
        }
        
        .filter-title {
            font-size: 16px;
            font-weight: 600;
            margin-bottom: 15px;
            color: var(--dark);
        }
        
        .filter-options {
            display: flex;
            gap: 10px;
            flex-wrap: wrap;
        }
        
        .filter-btn {
            padding: 10px 20px;
            background: var(--light);
            border: none;
            border-radius: 8px;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.3s ease;
        }
        
        .filter-btn.active {
            background: var(--primary);
            color: white;
        }
        
        .transaction-card {
            background: white;
            border-radius: 12px;
            padding: 25px;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
            margin-bottom: 20px;
            display: none;
        }
        
        .transaction-card.active {
            display: block;
        }
        
        .transaction-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
        }
        
        .transaction-title {
            font-size: 20px;
            font-weight: 600;
        }
        
        .transaction-amount {
            font-size: 24px;
            font-weight: 700;
        }
        
        .income {
            color: var(--success);
        }
        
        .expense {
            color: var(--danger);
        }
        
        .transaction-details {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 15px;
            margin-bottom: 25px;
        }
        
        .detail-item {
            display: flex;
            flex-direction: column;
            gap: 5px;
        }
        
        .detail-label {
            font-size: 14px;
            color: var(--gray);
        }
        
        .detail-value {
            font-size: 16px;
            font-weight: 500;
        }
        
        .transaction-actions {
            display: flex;
            gap: 10px;
            justify-content: flex-end;
        }
        
        .action-btn {
            padding: 10px 20px;
            border: none;
            border-radius: 8px;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.3s ease;
        }
        
        .edit-btn {
            background: var(--light);
            color: var(--dark);
        }
        
        .delete-btn {
            background: var(--danger);
            color: white;
        }
        
        .pagination {
            display: flex;
            justify-content: center;
            gap: 10px;
            margin-top: 30px;
        }
        
        .page-btn {
            width: 40px;
            height: 40px;
            display: flex;
            align-items: center;
            justify-content: center;
            background: white;
            border: none;
            border-radius: 8px;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.3s ease;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.05);
        }
        
        .page-btn.active {
            background: var(--primary);
            color: white;
        }
        
        .page-btn:hover:not(.active) {
            background: var(--light);
        }
        
        .empty-state {
            text-align: center;
            padding: 40px 20px;
            color: var(--gray);
        }
        
        .empty-state i {
            font-size: 48px;
            margin-bottom: 15px;
            color: var(--light-gray);
        }
        
        @media (max-width: 600px) {
            .transaction-details {
                grid-template-columns: 1fr;
            }
            
            .filter-options {
                flex-direction: column;
            }
            
            .filter-btn {
                text-align: center;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <header>
            <a href="index.html" class="logo">
                <i class="fas fa-chart-pie"></i>
                <span>ExpenseTracker</span>
            </a>
            <a href="index.html" class="back-btn">
                <i class="fas fa-arrow-left"></i>
                Back to Dashboard
            </a>
        </header>
        
        <h1 class="page-title">Transaction History</h1>
        <p class="page-subtitle">View and manage all your financial transactions</p>
        
        <div class="filter-section">
            <h3 class="filter-title">Time Period</h3>
            <div class="filter-options">
                <button class="filter-btn active" data-period="all">All Transactions</button>
                <button class="filter-btn" data-period="year">This Year</button>
                <button class="filter-btn" data-period="month">This Month</button>
            </div>
        </div>
        
        <div class="filter-section">
            <h3 class="filter-title">Transaction Type</h3>
            <div class="filter-options">
                <button class="filter-btn active" data-type="all">All</button>
                <button class="filter-btn" data-type="income">Income Only</button>
                <button class="filter-btn" data-type="expense">Expense Only</button>
            </div>
        </div>
        
        <div id="transactions-container">
            <!-- Transactions will be loaded here by JavaScript -->
        </div>
        
        <div class="pagination">
            <button class="page-btn active">1</button>
            <button class="page-btn">2</button>
            <button class="page-btn">3</button>
            <button class="page-btn">4</button>
            <button class="page-btn">5</button>
        </div>
    </div>

    <script>
        // Sample transaction data
        const transactions = [
            {
                id: 1,
                title: "Grocery Shopping",
                amount: -86.00,
                type: "expense",
                category: "Food & Dining",
                date: "2023-05-24",
                account: "Credit Card",
                description: "Weekly grocery shopping at Walmart",
                period: "month"
            },
            {
                id: 2,
                title: "Salary Deposit",
                amount: 2400.00,
                type: "income",
                category: "Salary",
                date: "2023-05-20",
                account: "Checking Account",
                description: "Monthly salary from work",
                period: "month"
            },
            {
                id: 3,
                title: "Dinner at Restaurant",
                amount: -64.50,
                type: "expense",
                category: "Food & Dining",
                date: "2023-05-18",
                account: "Debit Card",
                description: "Dinner with friends at Italian restaurant",
                period: "month"
            },
            {
                id: 4,
                title: "Netflix Subscription",
                amount: -15.99,
                type: "expense",
                category: "Entertainment",
                date: "2023-05-15",
                account: "Credit Card",
                description: "Monthly subscription fee",
                period: "month"
            },
            {
                id: 5,
                title: "Freelance Work",
                amount: 500.00,
                type: "income",
                category: "Freelance",
                date: "2023-04-10",
                account: "PayPal",
                description: "Payment for website design project",
                period: "year"
            },
            {
                id: 6,
                title: "Car Maintenance",
                amount: -320.00,
                type: "expense",
                category: "Transportation",
                date: "2023-04-05",
                account: "Debit Card",
                description: "Oil change and brake inspection",
                period: "year"
            },
            {
                id: 7,
                title: "Tax Refund",
                amount: 1200.00,
                type: "income",
                category: "Tax",
                date: "2023-03-28",
                account: "Checking Account",
                description: "Federal tax refund",
                period: "year"
            },
            {
                id: 8,
                title: "New Laptop",
                amount: -1200.00,
                type: "expense",
                category: "Electronics",
                date: "2023-02-15",
                account: "Credit Card",
                description: "Purchase of new MacBook Pro",
                period: "year"
            },
            {
                id: 9,
                title: "Bonus",
                amount: 1000.00,
                type: "income",
                category: "Bonus",
                date: "2022-12-20",
                account: "Checking Account",
                description: "Year-end performance bonus",
                period: "all"
            },
            {
                id: 10,
                title: "Holiday Gifts",
                amount: -350.00,
                type: "expense",
                category: "Gifts",
                date: "2022-12-18",
                account: "Credit Card",
                description: "Christmas presents for family",
                period: "all"
            }
        ];

        // DOM elements
        const transactionsContainer = document.getElementById('transactions-container');
        const periodFilterButtons = document.querySelectorAll('[data-period]');
        const typeFilterButtons = document.querySelectorAll('[data-type]');
        const paginationButtons = document.querySelectorAll('.page-btn');

        // Current filter state
        let currentPeriod = 'all';
        let currentType = 'all';
        let currentPage = 1;
        const transactionsPerPage = 1;

        // Initialize the page
        document.addEventListener('DOMContentLoaded', function() {
            renderTransactions();
            setupEventListeners();
        });

        // Set up event listeners
        function setupEventListeners() {
            // Period filter buttons
            periodFilterButtons.forEach(button => {
                button.addEventListener('click', function() {
                    periodFilterButtons.forEach(btn => btn.classList.remove('active'));
                    this.classList.add('active');
                    currentPeriod = this.getAttribute('data-period');
                    currentPage = 1;
                    updatePagination();
                    renderTransactions();
                });
            });

            // Type filter buttons
            typeFilterButtons.forEach(button => {
                button.addEventListener('click', function() {
                    typeFilterButtons.forEach(btn => btn.classList.remove('active'));
                    this.classList.add('active');
                    currentType = this.getAttribute('data-type');
                    currentPage = 1;
                    updatePagination();
                    renderTransactions();
                });
            });

            // Pagination buttons
            paginationButtons.forEach(button => {
                button.addEventListener('click', function() {
                    if (!isNaN(parseInt(this.textContent))) {
                        paginationButtons.forEach(btn => btn.classList.remove('active'));
                        this.classList.add('active');
                        currentPage = parseInt(this.textContent);
                        renderTransactions();
                    }
                });
            });
        }

        // Filter transactions based on current filters
        function filterTransactions() {
            return transactions.filter(transaction => {
                // Filter by period
                if (currentPeriod !== 'all' && transaction.period !== currentPeriod && transaction.period !== 'all') {
                    return false;
                }
                
                // Filter by type
                if (currentType !== 'all' && transaction.type !== currentType) {
                    return false;
                }
                
                return true;
            });
        }

        // Update pagination buttons based on filtered transactions
        function updatePagination() {
            const filteredTransactions = filterTransactions();
            const pageCount = Math.ceil(filteredTransactions.length / transactionsPerPage);
            
            // Clear existing pagination
            const paginationContainer = document.querySelector('.pagination');
            paginationContainer.innerHTML = '';
            
            // Create new pagination buttons
            for (let i = 1; i <= pageCount; i++) {
                const button = document.createElement('button');
                button.className = `page-btn ${i === currentPage ? 'active' : ''}`;
                button.textContent = i;
                button.addEventListener('click', function() {
                    document.querySelectorAll('.page-btn').forEach(btn => btn.classList.remove('active'));
                    this.classList.add('active');
                    currentPage = i;
                    renderTransactions();
                });
                paginationContainer.appendChild(button);
            }
        }

        // Render transactions based on current filters and page
        function renderTransactions() {
            const filteredTransactions = filterTransactions();
            
            // Clear container
            transactionsContainer.innerHTML = '';
            
            if (filteredTransactions.length === 0) {
                // Show empty state
                transactionsContainer.innerHTML = `
                    <div class="empty-state">
                        <i class="fas fa-receipt"></i>
                        <h3>No transactions found</h3>
                        <p>Try adjusting your filters to see more results</p>
                    </div>
                `;
                return;
            }
            
            // Calculate which transaction to show
            const startIndex = (currentPage - 1) * transactionsPerPage;
            const transactionToShow = filteredTransactions[startIndex];
            
            if (transactionToShow) {
                const transactionElement = createTransactionElement(transactionToShow);
                transactionsContainer.appendChild(transactionElement);
            }
            
            // Update pagination
            updatePagination();
        }

        // Create HTML for a single transaction
        function createTransactionElement(transaction) {
            const isIncome = transaction.type === 'income';
            const amountClass = isIncome ? 'income' : 'expense';
            const amountSign = isIncome ? '+' : '-';
            const formattedAmount = `${amountSign}$${Math.abs(transaction.amount).toFixed(2)}`;
            
            return `
                <div class="transaction-card active">
                    <div class="transaction-header">
                        <h2 class="transaction-title">${transaction.title}</h2>
                        <div class="transaction-amount ${amountClass}">${formattedAmount}</div>
                    </div>
                    
                    <div class="transaction-details">
                        <div class="detail-item">
                            <span class="detail-label">Category</span>
                            <span class="detail-value">${transaction.category}</span>
                        </div>
                        
                        <div class="detail-item">
                            <span class="detail-label">Date</span>
                            <span class="detail-value">${formatDate(transaction.date)}</span>
                        </div>
                        
                        <div class="detail-item">
                            <span class="detail-label">Account</span>
                            <span class="detail-value">${transaction.account}</span>
                        </div>
                        
                        <div class="detail-item">
                            <span class="detail-label">Type</span>
                            <span class="detail-value">${isIncome ? 'Income' : 'Expense'}</span>
                        </div>
                    </div>
                    
                    <div class="detail-item">
                        <span class="detail-label">Description</span>
                        <span class="detail-value">${transaction.description}</span>
                    </div>
                    
                    <div class="transaction-actions">
                        <button class="action-btn edit-btn">
                            <i class="fas fa-edit"></i> Edit
                        </button>
                        <button class="action-btn delete-btn">
                            <i class="fas fa-trash"></i> Delete
                        </button>
                    </div>
                </div>
            `;
        }

        // Format date for display
        function formatDate(dateString) {
            const options = { year: 'numeric', month: 'long', day: 'numeric' };
            return new Date(dateString).toLocaleDateString('en-US', options);
        }
    </script>
</body>
</html>